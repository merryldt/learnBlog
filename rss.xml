<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://merryldt.github.io/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://merryldt.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    <title>魔力社区</title>
    <link>https://merryldt.github.io/</link>
    <description>系统的梳理,可以让人思路清晰</description>
    <language>zh-CN</language>
    <pubDate>Tue, 22 Aug 2023 12:04:02 GMT</pubDate>
    <lastBuildDate>Tue, 22 Aug 2023 12:04:02 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>算法 二叉堆</category>
    <category>redis</category>
    <item>
      <title>Kubernetes 组件</title>
      <link>https://merryldt.github.io/moyu/k8s/04_Kubernetes_Components.html</link>
      <guid>https://merryldt.github.io/moyu/k8s/04_Kubernetes_Components.html</guid>
      <source url="https://merryldt.github.io/rss.xml">Kubernetes 组件</source>
      <description>Kubernetes 组件 前提 部署完 Kubernetes，便拥有了一个完整的集群。 一组工作机器，称为节点， 会运行容器化应用程序。每个集群至少有一个工作节点。 工作节点会托管 Pod，而 Pod 就是作为应用负载的组件。 控制平面管理集群中的工作节点和 Pod。 在生产环境中，控制平面通常跨多台计算机运行， 一个集群通常运行多个节点，提供容错性和高可用性。 image.png 控制平面组件（Control Plane Components） 控制平面组件会为集群做出全局决策，比如资源的调度。 以及检测和响应集群事件.(例如当不满足部署的 replicas 字段时， 要启动新的 pod）。控制平面组件可以在集群中的任何节点上运行。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有控制平面组件， 并且不会在此计算机上运行用户容器。</description>
      <pubDate>Tue, 22 Aug 2023 00:34:47 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Kubernetes 组件</h1>
<h2> 前提</h2>
<p>部署完 Kubernetes，便拥有了一个完整的集群。</p>
<p>一组工作机器，称为节点， 会运行容器化应用程序。每个集群至少有一个工作节点。
工作节点会托管 Pod，而 Pod 就是作为应用负载的组件。 控制平面管理集群中的工作节点和 Pod。
在生产环境中，控制平面通常跨多台计算机运行， 一个集群通常运行多个节点，提供容错性和高可用性。</p>
<p>image.png</p>
<h2> 控制平面组件（Control Plane Components）</h2>
<p>控制平面组件会为集群做出全局决策，比如资源的调度。 以及检测和响应集群事件.(例如当不满足部署的 replicas 字段时， 要启动新的 pod）。控制平面组件可以在集群中的任何节点上运行。
然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有控制平面组件， 并且不会在此计算机上运行用户容器。</p>
<h3> kube-apiserver</h3>
<p>API 服务器是 Kubernetes 控制平面的组件， 该组件负责公开了 Kubernetes API，负责处理接受请求的工作。 API 服务器是 Kubernetes 控制平面的前端。
Kubernetes API 服务器的主要实现是 kube-apiserver。 kube-apiserver 设计上考虑了水平扩缩，也就是说，它可通过部署多个实例来进行扩缩。 你可以运行 kube-apiserver 的多个实例，并在这些实例之间平衡流量。</p>
<h3> etcd</h3>
<p>一致且高可用的键值存储，用作 Kubernetes 所有集群数据的后台数据库。
如果你的 Kubernetes 集群使用 etcd 作为其后台数据库， 请确保你针对这些数据有一份 备份计划。</p>
<h3> kube-scheduler</h3>
<p>kube-scheduler 是控制平面的组件， 负责监视新创建的、未指定运行节点（node）的 Pods， 并选择节点来让 Pod 在上面运行。</p>
<p>调度决策考虑的因素包括单个 Pod 及 Pods 集合的资源需求、软硬件及策略约束、 亲和性及反亲和性规范、数据位置、工作负载间的干扰及最后时限。</p>
<h3> kube-controller-manager</h3>
<p>kube-controller-manager 是控制平面的组件， 负责<strong>运行控制器进程</strong>。
从逻辑上讲， 每个控制器都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在同一个进程中运行。
例如:</p>
<ul>
<li>节点控制器（Node Controller）：负责在节点出现故障时进行通知和响应</li>
<li>任务控制器（Job Controller）：监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成</li>
<li>端点分片控制器（EndpointSlice controller）：填充端点分片（EndpointSlice）对象（以提供 Service 和 Pod 之间的链接）。</li>
<li>服务账号控制器（ServiceAccount controller）：为新的命名空间创建默认的服务账号（ServiceAccount）。</li>
</ul>
<h3> cloud-controller-manager</h3>
<p>cloud-controller-manager 仅运行特定于云平台的控制器。
一个 Kubernetes 控制平面组件， 嵌入了特定于云平台的控制逻辑。 云控制器管理器（Cloud Controller Manager）允许你将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。</p>
<h2> Node 组件</h2>
<p>节点组件会在每个节点上运行，负责维护运行的 Pod 并提供 Kubernetes 运行环境。</p>
<h3> kubelet</h3>
<p>kubelet 会在集群中每个节点（node）上运行。 它保证容器（containers）都运行在 Pod 中。
kubelet 接收一组通过各类机制提供给它的 PodSpecs， 确保这些 PodSpecs 中描述的容器处于运行状态且健康。 kubelet 不会管理不是由 Kubernetes 创建的容器。</p>
<h3> kube-proxy</h3>
<p>kube-proxy 是集群中每个节点（node）上所运行的网络代理， 实现 Kubernetes 服务（Service） 概念的一部分。
kube-proxy 维护节点上的一些网络规则， 这些网络规则会允许从集群内部或外部的网络会话与 Pod 进行网络通信。
如果操作系统提供了可用的数据包过滤层，则 kube-proxy 会通过它来实现网络规则。 否则，kube-proxy 仅做流量转发。</p>
<h3> Container Runtime</h3>
<p>容器运行环境是负责运行容器的软件。
Kubernetes 支持许多容器运行环境，例如 containerd、 CRI-O 以及 Kubernetes CRI (容器运行环境接口) 的其他任何实现。</p>
<h2> 插件(Addons)</h2>
<p>插件使用 Kubernetes 资源（DaemonSet、 Deployment 等）实现集群功能。 因为这些插件提供集群级别的功能，插件中命名空间域的资源属于 kube-system 命名空间。</p>
<h3> DNS</h3>
<p>集群 DNS 是一个 DNS 服务器，和环境中的其他 DNS 服务器一起工作，它为 Kubernetes 服务提供 DNS 记录。</p>
<p>Kubernetes 启动的容器自动将此 DNS 服务器包含在其 DNS 搜索列表中。
几乎所有 Kubernetes 集群都应该有集群 DNS。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Kubernetes API</title>
      <link>https://merryldt.github.io/moyu/k8s/05_Kubernetes_API.html</link>
      <guid>https://merryldt.github.io/moyu/k8s/05_Kubernetes_API.html</guid>
      <source url="https://merryldt.github.io/rss.xml">Kubernetes API</source>
      <description>Kubernetes API Kubernetes 控制面的核心是 API 服务器。 API 服务器负责提供 HTTP API，以供用户、集群中的不同部分和集群外部组件相互通信。 Kubernetes API 使你可以在 Kubernetes 中查询和操纵 API 对象 （例如 Pod、Namespace、ConfigMap 和 Event）的状态。 操作工具 kubectl 命令行接口 kubeadm 持久化 Kubernetes 通过将序列化状态的对象写入到 etcd 中完成存储操作。</description>
      <pubDate>Tue, 22 Aug 2023 00:34:47 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Kubernetes API</h1>
<p>Kubernetes 控制面的核心是 API 服务器。 API 服务器负责提供 HTTP API，以供用户、集群中的不同部分和集群外部组件相互通信。</p>
<p>Kubernetes API 使你可以在 Kubernetes 中查询和操纵 API 对象 （例如 Pod、Namespace、ConfigMap 和 Event）的状态。</p>
<h2> 操作工具</h2>
<ul>
<li>kubectl 命令行接口</li>
<li>kubeadm</li>
</ul>
<h2> 持久化</h2>
<p>Kubernetes 通过将序列化状态的对象写入到 etcd 中完成存储操作。</p>
]]></content:encoded>
    </item>
    <item>
      <title></title>
      <link>https://merryldt.github.io/moyu/k8s/06_Cluster_Architecture.html</link>
      <guid>https://merryldt.github.io/moyu/k8s/06_Cluster_Architecture.html</guid>
      <source url="https://merryldt.github.io/rss.xml"></source>
      <description>Nodes Communication between Nodes and the Control Plane</description>
      <pubDate>Tue, 22 Aug 2023 00:34:47 GMT</pubDate>
      <content:encoded><![CDATA[<h2> Nodes</h2>
<h2> Communication between Nodes and the Control Plane</h2>
]]></content:encoded>
    </item>
    <item>
      <title>概述</title>
      <link>https://merryldt.github.io/moyu/k8s/01_total.html</link>
      <guid>https://merryldt.github.io/moyu/k8s/01_total.html</guid>
      <source url="https://merryldt.github.io/rss.xml">概述</source>
      <description>概述 Kubernetes 是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。 k8s 的崛起理由 Alt text 传统部署时代： 早期，各个组织是在物理服务器上运行应用程序。 由于无法限制在物理服务器中运行的应用程序资源使用，因此会导致资源分配问题。 例如，如果在同一台物理服务器上运行多个应用程序， 则可能会出现一个应用程序占用大部分资源的情况，而导致其他应用程序的性能下降。 一种解决方案是将每个应用程序都运行在不同的物理服务器上， 但是当某个应用程序资源利用率不高时，剩余资源无法被分配给其他应用程序， 而且维护许多物理服务器的成本很高。</description>
      <pubDate>Mon, 21 Aug 2023 12:17:04 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 概述</h1>
<p>Kubernetes 是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。</p>
<h2> k8s 的崛起理由</h2>
<figure><figcaption>Alt text</figcaption></figure>
<h3> 传统部署时代：</h3>
<p>早期，各个组织是在物理服务器上运行应用程序。 由于无法限制在物理服务器中运行的应用程序资源使用，因此会导致资源分配问题。 例如，如果在同一台物理服务器上运行多个应用程序， 则可能会出现一个应用程序占用大部分资源的情况，而导致其他应用程序的性能下降。 一种解决方案是将每个应用程序都运行在不同的物理服务器上， 但是当某个应用程序资源利用率不高时，剩余资源无法被分配给其他应用程序， 而且维护许多物理服务器的成本很高。</p>
<h3> 虚拟化部署时代：</h3>
<p>因此，虚拟化技术被引入了。虚拟化技术允许你在单个物理服务器的 CPU 上运行多台虚拟机（VM）。 虚拟化能使应用程序在不同 VM 之间被彼此隔离，且能提供一定程度的安全性， 因为一个应用程序的信息不能被另一应用程序随意访问。</p>
<p>虚拟化技术能够更好地利用物理服务器的资源，并且因为可轻松地添加或更新应用程序， 而因此可以具有更高的可扩缩性，以及降低硬件成本等等的好处。 通过虚拟化，你可以将一组物理资源呈现为可丢弃的虚拟机集群。</p>
<p>每个 VM 是一台完整的计算机，在虚拟化硬件之上运行所有组件，包括其自己的操作系统。</p>
<h3> 容器部署时代：</h3>
<p>容器类似于 VM，但是更宽松的隔离特性，使容器之间可以共享操作系统（OS）。 因此，容器比起 VM 被认为是更轻量级的。且与 VM 类似，每个容器都具有自己的文件系统、CPU、内存、进程空间等。 由于它们与基础架构分离，因此可以跨云和 OS 发行版本进行移植。</p>
<p>容器因具有许多优势而变得流行起来，例如：</p>
<ul>
<li>敏捷应用程序的创建和部署：与使用 VM 镜像相比，提高了容器镜像创建的简便性和效率。</li>
<li>持续开发、集成和部署：通过快速简单的回滚（由于镜像不可变性）， 提供可靠且频繁的容器镜像构建和部署。</li>
<li>关注开发与运维的分离：在构建、发布时创建应用程序容器镜像，而不是在部署时， 从而将应用程序与基础架构分离。</li>
<li>可观察性：不仅可以显示 OS 级别的信息和指标，还可以显示应用程序的运行状况和其他指标信号。</li>
<li>跨开发、测试和生产的环境一致性：在笔记本计算机上也可以和在云中运行一样的应用程序。</li>
<li>跨云和操作系统发行版本的可移植性：可在 Ubuntu、RHEL、CoreOS、本地、 Google Kubernetes Engine 和其他任何地方运行。</li>
<li>以应用程序为中心的管理：提高抽象级别，从在虚拟硬件上运行 OS 到使用逻辑资源在 OS 上运行应用程序。</li>
<li>松散耦合、分布式、弹性、解放的微服务：应用程序被分解成较小的独立部分， 并且可以动态部署和管理 - 而不是在一台大型单机上整体运行。</li>
<li>资源隔离：可预测的应用程序性能。</li>
<li>资源利用：高效率和高密度。</li>
</ul>
<h3> 当然,单个容器很方便,多个呢？是否需要管理</h3>
<p>Kubernetes。
Kubernetes 为你提供了一个可弹性运行分布式系统的框架。 Kubernetes 会满足你的扩展要求、故障转移你的应用、提供部署模式等。 例如，Kubernetes 可以轻松管理系统的 Canary (金丝雀) 部署。</p>
<h2> Kubernetes 可以为我们提供</h2>
<h3> 服务发现和负载均衡</h3>
<p>Kubernetes 可以使用 DNS 名称或自己的 IP 地址来暴露容器。 如果进入容器的流量很大， Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</p>
<h3> 存储编排</h3>
<p>Kubernetes 允许你自动挂载你选择的存储系统，例如本地存储、公共云提供商等。</p>
<h3> 自动部署和回滚</h3>
<p>你可以使用 Kubernetes 描述已部署容器的所需状态， 它可以以受控的速率将实际状态更改为期望状态。 例如，你可以自动化 Kubernetes 来为你的部署创建新容器， 删除现有容器并将它们的所有资源用于新容器。</p>
<h3> 自动完成装箱计算</h3>
<p>你为 Kubernetes 提供许多节点组成的集群，在这个集群上运行容器化的任务。 你告诉 Kubernetes 每个容器需要多少 CPU 和内存 (RAM)。 Kubernetes 可以将这些容器按实际情况调度到你的节点上，以最佳方式利用你的资源。</p>
<h3> 自我修复</h3>
<p>Kubernetes 将重新启动失败的容器、替换容器、杀死不响应用户定义的运行状况检查的容器， 并且在准备好服务之前不将其通告给客户端。</p>
<h3> 密钥与配置管理</h3>
<p>Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 SSH 密钥。 你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</p>
<h2> 总结</h2>
<p>Kubernetes 是在容器级别运行，而非在硬件级别，它提供了 PaaS 产品共有的一些普遍适用的功能， 例如部署、扩展、负载均衡，允许用户集成他们的日志记录、监控和警报方案。
Kubernetes 为构建开发人员平台提供了基础，但是在重要的地方保留了用户选择权，能有更高的灵活性。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Kubernetes 对象</title>
      <link>https://merryldt.github.io/moyu/k8s/02_duixiang.html</link>
      <guid>https://merryldt.github.io/moyu/k8s/02_duixiang.html</guid>
      <source url="https://merryldt.github.io/rss.xml">Kubernetes 对象</source>
      <description>Kubernetes 对象 概述 在 Kubernetes 系统中，Kubernetes 对象是持久化的实体。 Kubernetes 使用这些实体去表示整个集群的状态。 具体而言，它们描述了如下信息： 哪些容器化应用正在运行（以及在哪些节点上运行） 可以被应用使用的资源 关于应用运行时行为的策略，比如重启策略、升级策略以及容错策略 Kubernetes 对象是一种“意向表达（Record of Intent）”。一旦创建该对象， Kubernetes 系统将不断工作以确保该对象存在。通过创建对象，你本质上是在告知 Kubernetes 系统，你想要的集群工作负载状态看起来应是什么样子的， 这就是 Kubernetes 集群所谓的期望状态（Desired State）。</description>
      <pubDate>Mon, 21 Aug 2023 12:17:04 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Kubernetes 对象</h1>
<h2> 概述</h2>
<p>在 Kubernetes 系统中，Kubernetes 对象是持久化的实体。 Kubernetes 使用这些实体去表示整个集群的状态。</p>
<p>具体而言，它们描述了如下信息：</p>
<ul>
<li>哪些容器化应用正在运行（以及在哪些节点上运行）</li>
<li>可以被应用使用的资源</li>
<li>关于应用运行时行为的策略，比如重启策略、升级策略以及容错策略</li>
</ul>
<p>Kubernetes 对象是一种“意向表达（Record of Intent）”。一旦创建该对象， Kubernetes 系统将不断工作以确保该对象存在。通过创建对象，你本质上是在告知 Kubernetes 系统，你想要的集群工作负载状态看起来应是什么样子的， 这就是 Kubernetes 集群所谓的期望状态（Desired State）。</p>
<p>操作 Kubernetes 对象 —— 无论是创建、修改或者删除 —— 需要使用 Kubernetes API。 比如，当使用 kubectl 命令行接口（CLI）时，CLI 会调用必要的 Kubernetes API； 也可以在程序中使用客户端库， 来直接调用 Kubernetes API。</p>
<h2> status 和 spec</h2>
<p>spec： 通俗的讲，就是创建Kubernetes 对象时设置的内容。比如：名字、有几个实例等。这些内容就是你对k8s 的期望状态 。
status:  当前状态。由 k8s  系统和组件设置并更新的。在任何时刻，k8s 控制平面 都一直在积极地管理着对象的实际状态，以使之达成期望状态。</p>
<p>例如，Kubernetes 中的 Deployment 对象能够表示运行在集群中的应用。 当创建 Deployment 时，你可能会设置 Deployment 的 spec，指定该应用要有 3 个副本运行。 Kubernetes 系统读取 Deployment 的 spec， 并启动我们所期望的应用的 3 个实例 —— 更新状态以与规约相匹配。 如果这些实例中有的失败了（一种状态变更），Kubernetes 系统会通过执行修正操作来响应 spec 和 status 间的不一致 —— 意味着它会启动一个新的实例来替换。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>必需字段</p>
<p>在想要创建的 Kubernetes 对象所对应的 .yaml 文件中，需要配置的字段如下：</p>
<ul>
<li>apiVersion - 创建该对象所使用的 Kubernetes API 的版本</li>
<li>kind - 想要创建的对象的类别</li>
<li>metadata - 帮助唯一标识对象的一些数据，包括一个 name 字符串、UID 和可选的 namespace</li>
<li>spec - 你所期望的该对象的状态</li>
</ul>
<h2> Pod 对象</h2>
<p>最重要的 Kubernetes 基本对象 Pod。</p>
<p>Pod 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。
Pod 是一组（一个或多个） 容器； 这些容器共享存储、网络、以及怎样运行这些容器的声明。
Pod的内容始终是同地同步的，在共享上下文中运行。Pod建模为一个应用特定的“逻辑主机”:它包含一个或多个相对紧密耦合的应用容器。在非云上下文中，在同一台物理机或虚拟机上运行的应用程序类似于在同一台逻辑主机上运行的云应用程序。</p>
<h2> 什么是pod?</h2>
<p>Pod 的共享上下文包括一组 Linux 名字空间、控制组（cgroup）和可能一些其他的隔离方面， 即用来隔离容器的技术。 在 Pod 的上下文中，每个独立的应用可能会进一步实施隔离。</p>
<p>Pod 类似于共享名字空间并共享文件系统卷的一组容器。</p>
<h2> Pod 示例</h2>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 使用pod</h2>
<p>Pod 通常不是直接创建的，而是使用工作负载资源创建的。</p>
<p>Kubernetes 集群中的 Pod 主要有两种用法：</p>
<ul>
<li>
<p>运行单个容器的 Pod。"每个 Pod 一个容器" 模型是最常见的 Kubernetes 用例； 在这种情况下，可以将 Pod 看作单个容器的包装器，并且 Kubernetes 直接管理 Pod，而不是容器。</p>
</li>
<li>
<p>运行多个协同工作的容器的 Pod。 Pod 可能封装由多个紧密耦合且需要共享资源的共处容器组成的应用程序。 这些位于同一位置的容器可能形成单个内聚的服务单元 —— 一个容器将文件从共享卷提供给公众， 而另一个单独的 “边车”（sidecar）容器则刷新或更新这些文件。 Pod 将这些容器和存储资源打包为一个可管理的实体。(相对高级，比较少使用)</p>
</li>
</ul>
<h2> Pod 怎样管理多个容器</h2>
<p>Pod 被设计成支持形成内聚服务单元的多个协作过程（形式为容器）。 Pod 中的容器被自动安排到集群中的同一物理机或虚拟机上，并可以一起进行调度。 容器之间可以共享资源和依赖、彼此通信、协调何时以及何种方式终止自身。</p>
<h2> 管理一个或者多个 Pod 的工作负载资源</h2>
<h3> Deployment</h3>
<h3> StatefulSet</h3>
<h3> DaemonSet</h3>
]]></content:encoded>
    </item>
    <item>
      <title>二叉堆</title>
      <link>https://merryldt.github.io/moyu/algorithm/datastructure/PriorityQueue.html</link>
      <guid>https://merryldt.github.io/moyu/algorithm/datastructure/PriorityQueue.html</guid>
      <source url="https://merryldt.github.io/rss.xml">二叉堆</source>
      <description>二叉堆 二叉堆在逻辑上其实是一种特殊的二叉树（完全二叉树），只不过存储在数组里。一般的链表二叉树，我们操作节点的指针，而在数组里，我们把数组索引作为指针： 两种类型: 最大堆和最小堆： 最大堆的性质是：每个节点都大于等于它的两个子节点; 最小堆的性质是：每个节点都小于等于它的子节点。 两个操作： swim(上浮) 和 sink(下沉) 在插入元素和删除元素时，难免破坏堆的性质，这就需要通过这两个操作来恢复堆的性质了。 最大堆的实现：</description>
      <category>算法 二叉堆</category>
      <pubDate>Fri, 04 Aug 2023 15:28:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 二叉堆</h2>
<p>二叉堆在逻辑上其实是一种特殊的二叉树（完全二叉树），只不过存储在数组里。一般的链表二叉树，我们操作节点的指针，而在数组里，我们把数组索引作为指针：</p>
<h2> 两种类型: 最大堆和最小堆：</h2>
<ul>
<li>最大堆的性质是：每个节点都大于等于它的两个子节点;</li>
<li>最小堆的性质是：每个节点都小于等于它的子节点。</li>
</ul>
<h2> 两个操作： swim(上浮) 和 sink(下沉)</h2>
<p>在插入元素和删除元素时，难免破坏堆的性质，这就需要通过这两个操作来恢复堆的性质了。</p>
<h3> 最大堆的实现：</h3>
<p>对于最大堆，会破坏堆性质的有两种情况：</p>
<p>1、如果某个节点 A 比它的子节点（中的一个）小，那么 A 就不配做父节点，应该下去，下面那个更大的节点上来做父节点，这就是对 A 进行<strong>下沉</strong>。</p>
<p>2、如果某个节点 A 比它的父节点大，那么 A 不应该做子节点，应该把父节点换下来，自己去做父节点，这就是对 A 的<strong>上浮</strong>。</p>
<h3> 最小堆的实现：</h3>
<p>对于最小堆，会破坏堆性质的有两种情况：</p>
<p>1、如果某个节点 A 比它的子节点（中的一个）大，那么 A 就不配做父节点，应该下去，下面那个更小的节点上来做父节点，这就是对 A 进行<strong>下沉</strong>。</p>
<p>2、如果某个节点 A 比它的父节点小，那么 A 不应该做子节点，应该把父节点换下来，自己去做父节点，这就是对 A 的<strong>上浮</strong>。</p>
<h2> 基本操作代码</h2>
<h3> 节点操作</h3>

<h3> 上浮和下沉</h3>
]]></content:encoded>
    </item>
    <item>
      <title>01) Redis 概览</title>
      <link>https://merryldt.github.io/moyu/redis/01_redis.html</link>
      <guid>https://merryldt.github.io/moyu/redis/01_redis.html</guid>
      <source url="https://merryldt.github.io/rss.xml">01) Redis 概览</source>
      <category>redis</category>
      <pubDate>Sat, 29 Jul 2023 15:23:28 GMT</pubDate>
    </item>
  </channel>
</rss>