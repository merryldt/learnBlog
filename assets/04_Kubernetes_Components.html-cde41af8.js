import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as a,b as n}from"./app-fc25c749.js";const o={},d=n('<h1 id="kubernetes-组件" tabindex="-1"><a class="header-anchor" href="#kubernetes-组件" aria-hidden="true">#</a> Kubernetes 组件</h1><h2 id="前提" tabindex="-1"><a class="header-anchor" href="#前提" aria-hidden="true">#</a> 前提</h2><p>部署完 Kubernetes，便拥有了一个完整的集群。</p><p>一组工作机器，称为节点， 会运行容器化应用程序。每个集群至少有一个工作节点。 工作节点会托管 Pod，而 Pod 就是作为应用负载的组件。 控制平面管理集群中的工作节点和 Pod。 在生产环境中，控制平面通常跨多台计算机运行， 一个集群通常运行多个节点，提供容错性和高可用性。</p><p>image.png</p><h2 id="控制平面组件-control-plane-components" tabindex="-1"><a class="header-anchor" href="#控制平面组件-control-plane-components" aria-hidden="true">#</a> 控制平面组件（Control Plane Components）</h2><p>控制平面组件会为集群做出全局决策，比如资源的调度。 以及检测和响应集群事件.(例如当不满足部署的 replicas 字段时， 要启动新的 pod）。控制平面组件可以在集群中的任何节点上运行。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有控制平面组件， 并且不会在此计算机上运行用户容器。</p><h3 id="kube-apiserver" tabindex="-1"><a class="header-anchor" href="#kube-apiserver" aria-hidden="true">#</a> kube-apiserver</h3><p>API 服务器是 Kubernetes 控制平面的组件， 该组件负责公开了 Kubernetes API，负责处理接受请求的工作。 API 服务器是 Kubernetes 控制平面的前端。 Kubernetes API 服务器的主要实现是 kube-apiserver。 kube-apiserver 设计上考虑了水平扩缩，也就是说，它可通过部署多个实例来进行扩缩。 你可以运行 kube-apiserver 的多个实例，并在这些实例之间平衡流量。</p><h3 id="etcd" tabindex="-1"><a class="header-anchor" href="#etcd" aria-hidden="true">#</a> etcd</h3><p>一致且高可用的键值存储，用作 Kubernetes 所有集群数据的后台数据库。 如果你的 Kubernetes 集群使用 etcd 作为其后台数据库， 请确保你针对这些数据有一份 备份计划。</p><h3 id="kube-scheduler" tabindex="-1"><a class="header-anchor" href="#kube-scheduler" aria-hidden="true">#</a> kube-scheduler</h3><p>kube-scheduler 是控制平面的组件， 负责监视新创建的、未指定运行节点（node）的 Pods， 并选择节点来让 Pod 在上面运行。</p><p>调度决策考虑的因素包括单个 Pod 及 Pods 集合的资源需求、软硬件及策略约束、 亲和性及反亲和性规范、数据位置、工作负载间的干扰及最后时限。</p><h3 id="kube-controller-manager" tabindex="-1"><a class="header-anchor" href="#kube-controller-manager" aria-hidden="true">#</a> kube-controller-manager</h3><p>kube-controller-manager 是控制平面的组件， 负责<strong>运行控制器进程</strong>。 从逻辑上讲， 每个控制器都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在同一个进程中运行。 例如:</p><ul><li>节点控制器（Node Controller）：负责在节点出现故障时进行通知和响应</li><li>任务控制器（Job Controller）：监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成</li><li>端点分片控制器（EndpointSlice controller）：填充端点分片（EndpointSlice）对象（以提供 Service 和 Pod 之间的链接）。</li><li>服务账号控制器（ServiceAccount controller）：为新的命名空间创建默认的服务账号（ServiceAccount）。</li></ul><h3 id="cloud-controller-manager" tabindex="-1"><a class="header-anchor" href="#cloud-controller-manager" aria-hidden="true">#</a> cloud-controller-manager</h3><p>cloud-controller-manager 仅运行特定于云平台的控制器。 一个 Kubernetes 控制平面组件， 嵌入了特定于云平台的控制逻辑。 云控制器管理器（Cloud Controller Manager）允许你将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。</p><h2 id="node-组件" tabindex="-1"><a class="header-anchor" href="#node-组件" aria-hidden="true">#</a> Node 组件</h2><p>节点组件会在每个节点上运行，负责维护运行的 Pod 并提供 Kubernetes 运行环境。</p><h3 id="kubelet" tabindex="-1"><a class="header-anchor" href="#kubelet" aria-hidden="true">#</a> kubelet</h3><p>kubelet 会在集群中每个节点（node）上运行。 它保证容器（containers）都运行在 Pod 中。 kubelet 接收一组通过各类机制提供给它的 PodSpecs， 确保这些 PodSpecs 中描述的容器处于运行状态且健康。 kubelet 不会管理不是由 Kubernetes 创建的容器。</p><h3 id="kube-proxy" tabindex="-1"><a class="header-anchor" href="#kube-proxy" aria-hidden="true">#</a> kube-proxy</h3><p>kube-proxy 是集群中每个节点（node）上所运行的网络代理， 实现 Kubernetes 服务（Service） 概念的一部分。 kube-proxy 维护节点上的一些网络规则， 这些网络规则会允许从集群内部或外部的网络会话与 Pod 进行网络通信。 如果操作系统提供了可用的数据包过滤层，则 kube-proxy 会通过它来实现网络规则。 否则，kube-proxy 仅做流量转发。</p><h3 id="container-runtime" tabindex="-1"><a class="header-anchor" href="#container-runtime" aria-hidden="true">#</a> Container Runtime</h3><p>容器运行环境是负责运行容器的软件。 Kubernetes 支持许多容器运行环境，例如 containerd、 CRI-O 以及 Kubernetes CRI (容器运行环境接口) 的其他任何实现。</p><h2 id="插件-addons" tabindex="-1"><a class="header-anchor" href="#插件-addons" aria-hidden="true">#</a> 插件(Addons)</h2><p>插件使用 Kubernetes 资源（DaemonSet、 Deployment 等）实现集群功能。 因为这些插件提供集群级别的功能，插件中命名空间域的资源属于 kube-system 命名空间。</p><h3 id="dns" tabindex="-1"><a class="header-anchor" href="#dns" aria-hidden="true">#</a> DNS</h3><p>集群 DNS 是一个 DNS 服务器，和环境中的其他 DNS 服务器一起工作，它为 Kubernetes 服务提供 DNS 记录。</p><p>Kubernetes 启动的容器自动将此 DNS 服务器包含在其 DNS 搜索列表中。 几乎所有 Kubernetes 集群都应该有集群 DNS。</p>',32),t=[d];function i(s,h){return r(),a("div",null,t)}const l=e(o,[["render",i],["__file","04_Kubernetes_Components.html.vue"]]);export{l as default};
