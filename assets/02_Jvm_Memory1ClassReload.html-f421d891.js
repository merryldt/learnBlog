import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as i,b as r}from"./app-65abe019.js";const t="/assets/02-1-1-363419bc.png",n={},d=r('<h1 id="类的生命周期" tabindex="-1"><a class="header-anchor" href="#类的生命周期" aria-hidden="true">#</a> 类的生命周期</h1><figure><img src="'+t+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h1 id="过程" tabindex="-1"><a class="header-anchor" href="#过程" aria-hidden="true">#</a> 过程</h1><h2 id="加载-load" tabindex="-1"><a class="header-anchor" href="#加载-load" aria-hidden="true">#</a> 加载（load）</h2><ol><li>通过一个类的全限定名来获取定义此类的二进制字节流;</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构;</li></ol><h2 id="链接-linking" tabindex="-1"><a class="header-anchor" href="#链接-linking" aria-hidden="true">#</a> 链接(Linking)</h2><h3 id="校验" tabindex="-1"><a class="header-anchor" href="#校验" aria-hidden="true">#</a> 校验</h3><p>目的是在于确保class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。<br> 主要包括四种验证：文件格式验证、元数据验证、字节码验证、符号引用验证。</p><h3 id="准备" tabindex="-1"><a class="header-anchor" href="#准备" aria-hidden="true">#</a> 准备</h3><p>为类变量分配内存并且设置该类变量的默认初始值，即零值。<br> 这里不包含用final 修饰的static，因为final 在编译的时候就会分配了,准备阶段会显示初始化；<br> 这里不会为实例变量分配初始化，类变量会分配在方法去中，而实例变量是会随着对象一起分配到JAVA堆中.</p>',10),h=[d];function s(l,o){return e(),i("div",null,h)}const f=a(n,[["render",s],["__file","02_Jvm_Memory1ClassReload.html.vue"]]);export{f as default};
