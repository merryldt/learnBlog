import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as e}from"./app-f87f5095.js";const t="/assets/image-1-012419af.png",i="/assets/image-4-7ad8b22e.png",p="/assets/image-2-0752edff.png",c="/assets/image-3-0c0363c6.png",l={},o=e(`<h2 id="缓存击穿-失效" tabindex="-1"><a class="header-anchor" href="#缓存击穿-失效" aria-hidden="true">#</a> 缓存击穿（失效）</h2><h3 id="原因-缓存不存在" tabindex="-1"><a class="header-anchor" href="#原因-缓存不存在" aria-hidden="true">#</a> 原因: 缓存不存在</h3><ul><li>背景: 缓存被删除或者失效</li><li>现象：热点数据，直接请求数据库，由于⾼并发，可能会把 DB 压垮，导致服务不可⽤。</li><li>关键字：单⼀热点数据、⾼并发、数据失效</li><li>描述： ⾼并发流量，访问的这个数据是热点数据，请求的数据在 DB 中存在，但是 Redis 存的那⼀份已经过期，后端需要从 DB 从加载数据并写到 Redis。</li></ul><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案：</h3><ol><li><p>过期时间 + 随机值</p><p>对于热点数据，我们不设置过期时间，这样就可以把请求都放在缓存中处理，充分把 Redis ⾼吞吐量性能利⽤起来。 或者过期时间再加⼀个随机值。<br> 设计缓存的过期时间时，使⽤公式：过期时间=baes 时间+随机时间。即相同业务数据写缓存时，在基础过期时间之上，再加⼀个随机的过期时间，让数据在未来⼀段时间内慢慢过期，避免瞬时全部过期，对 DB 造成过⼤压⼒</p></li><li><p>预热<br> 分析热门数据,单独处理。预先把热⻔数据提前存⼊ Redis 中，并设热⻔数据的过期时间超⼤值。</p></li><li><p>加锁</p><ul><li>当发现缓存失效的时候，不是⽴即从数据库加载数据。</li><li>⽽是先获取分布式锁，获取锁成功，再去查询一次缓存，如果为null,才执⾏数据库查询和写数据到缓存的操作，获取锁失败，则说明当前有线程在执数据库查询操作，当前线程睡眠⼀段时间在重试。</li><li>这样只让⼀个请求去数据库读取数据</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">String</span> desc <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 缓存为空，过期了</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>desc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// 互斥锁，只有⼀个请求可以成功</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">redis</span><span class="token punctuation">(</span>lockName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">try</span><span class="token punctuation">{</span>
                 <span class="token comment">// 这里一定要再读一次，不然大量请求到了这一步，就算缓存中有了，也要全部请求一次数据库。</span>
                desc <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> desc<span class="token punctuation">)</span> <span class="token keyword">return</span> desc<span class="token punctuation">;</span>
                <span class="token comment">// 从数据库取出数据</span>
                desc <span class="token operator">=</span> <span class="token function">getFromDB</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 写到 Redis</span>
                redis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token class-name">LogHelper</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">// 确保最后删除，释放锁</span>
                redis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>lockName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> desc<span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 否则睡眠200ms，接着获取锁</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">getData</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透" aria-hidden="true">#</a> 缓存穿透</h2><h3 id="原因-数据在【缓存和数据库】中不存在" tabindex="-1"><a class="header-anchor" href="#原因-数据在【缓存和数据库】中不存在" aria-hidden="true">#</a> 原因：数据在【缓存和数据库】中不存在</h3><p>缓存穿透：意味着有特殊请求在查询⼀个不存在的数据，即不数据存在 Redis 也不存在于数据库。 导致每次请求都会穿透到数据库，缓存成了摆设，对数据库产⽣很⼤压⼒从⽽影响正常服务。</p><figure><img src="`+t+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h3 id="解决方案-1" tabindex="-1"><a class="header-anchor" href="#解决方案-1" aria-hidden="true">#</a> 解决⽅案</h3><ul><li>缓存空值：当请求的数据不存在 Redis 也不存在数据库的时候，设置⼀个缺省值（⽐如：None）。当后续再次进⾏查询则直接返回空值或者缺省值。</li><li>布隆过滤器：在数据写⼊数据库的同时将这个 ID 同步到到布隆过滤器中，当请求的 id 不存在布隆过滤器中则说明该请求查询的数据⼀定没有在数据库中保存，就不要去数据库查询了 <strong>布隆过滤器</strong> BloomFilter 要缓存全量的 key，这就要求全量的 key 数量不⼤，10 亿 条数据以内最佳，因为 10 亿 条数据⼤概要占⽤ 1.2GB 的内存。</li></ul><p>说下布隆过滤器的原理吧</p><p>BloomFilter 的算法是，⾸先分配⼀块内存空间做 bit 数组，数组的 bit 位初始值全部设为 0。 加⼊元素时，采⽤ k 个相互独⽴的 Hash 函数计算，然后将元素 Hash 映射的 K 个位置全部设置为1。</p><p>检测 key 是否存在，仍然⽤这 k 个 Hash 函数计算出 k 个位置，如果位置全部为 1，则表明 key 存在，否则不存在。</p><figure><img src="'+i+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><p>哈希函数会出现碰撞，所以布隆过滤器会存在误判。 这⾥的误判率是指，BloomFilter 判断某个 key 存在，但它实际不存在的概率，因为它存的是 key 的 Hash 值，⽽⾮ key 的值。</p><p>所以有概率存在这样的 key，它们内容不同，但多次 Hash 后的 Hash 值都相同。 对于 BloomFilter 判断不存在的 key ，则是 100% 不存在的，反证法，如果这个 key 存在，那它每次 Hash 后对应的 Hash 值位置肯定是 1，⽽不会是 0。布隆过滤器判断存在不⼀定真的存在。</p><h2 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩" aria-hidden="true">#</a> 缓存雪崩</h2><p>缓存雪崩指的是⼤量的请求⽆法在 Redis 缓存系统中处理，请求全部打到数据库，导致数据库压⼒激增，甚⾄宕 机。 出现该原因主要有两种：</p><ul><li>⼤量热点数据同时过期，导致⼤量请求需要查询数据库并写到缓存；</li><li>Redis 故障宕机，缓存系统异常。</li></ul><h3 id="原因一-缓存大量数据同时过期" tabindex="-1"><a class="header-anchor" href="#原因一-缓存大量数据同时过期" aria-hidden="true">#</a> 原因一：<strong>缓存⼤量数据同时过期</strong></h3><p>数据保存在缓存系统并设置了过期时间，但是由于在同时⼀刻，⼤量数据同时过期。<br> 系统就把请求全部打到数据库获取数据，并发量⼤的话就会导致数据库压⼒激增。<br> 缓存雪崩是发⽣在⼤量数据同时失效的场景，⽽缓存击穿（失效）是在某个热点数据失效的场景，这是他们最⼤的区别。</p><figure><img src="'+p+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h3 id="原因一-解决方案" tabindex="-1"><a class="header-anchor" href="#原因一-解决方案" aria-hidden="true">#</a> 原因一：解决⽅案</h3><ol><li><p>过期时间添加随机值 要避免给⼤量的数据设置⼀样的过期时间，过期时间 = baes 时间+ 随机时间（较⼩的随机数，⽐如随机增加 1~5分钟）。<br> 这样⼀来，就不会导致同⼀时刻热点数据全部失效，同时过期时间差别也不会太⼤，既保证了相近时间失效，⼜能满⾜业务需求。</p></li><li><p>接⼝限流 当访问的不是核⼼数据的时候，在查询的⽅法上加上接⼝限流保护。⽐如设置 10000 req/s。<br> 如果访问的是核⼼数据接⼝，缓存不存在允许从数据库中查询并设置到缓存中。<br> 这样的话，只有部分请求会发送到数据库，减少了压⼒。<br> 限流，就是指，我们在业务系统的请求⼊⼝前端控制每秒进⼊系统的请求数，避免过多的请求被发送到数据库。</p><figure><img src="'+c+'" alt="接⼝限流" tabindex="0" loading="lazy"><figcaption>接⼝限流</figcaption></figure></li></ol><h3 id="原因二-redis-故障宕机" tabindex="-1"><a class="header-anchor" href="#原因二-redis-故障宕机" aria-hidden="true">#</a> 原因二：<strong>Redis 故障宕机</strong></h3><p>⼀个 Redis 实例能⽀撑 10 万的 QPS，⽽⼀个数据库实例只有 1000 QPS。<br> ⼀旦 Redis 宕机，会导致⼤量请求打到数据库，从⽽发⽣缓存雪崩。</p><h3 id="原因二-解决方案" tabindex="-1"><a class="header-anchor" href="#原因二-解决方案" aria-hidden="true">#</a> 原因二： 解决方案：</h3><p>对于缓存系统故障导致的缓存雪崩的解决⽅案有两种：</p><ul><li>服务熔断和接⼝限流；</li><li>构建⾼可⽤缓存集群系统。</li></ul><h4 id="服务" tabindex="-1"><a class="header-anchor" href="#服务" aria-hidden="true">#</a> 服务</h4><p><strong>服务熔断和限流</strong></p><p>在业务系统中，针对⾼并发的使⽤服务熔断来有损提供服务从⽽保证系统的可⽤性。 服务熔断就是当从缓存获取数据发现异常，则直接返回错误数据给前端，防⽌所有流量打到数据库导致宕机。 服务熔断和限流属于在发⽣了缓存雪崩，如何降低雪崩对数据库造成的影响的⽅案。</p><p><strong>构建⾼可⽤的缓存集群</strong></p><p>所以，缓存系统⼀定要构建⼀套 Redis ⾼可⽤集群，⽐如 《Redis 哨兵集群》或者 《Redis Cluster 集群》，如果Redis 的主节点故障宕机了，从节点还可以切换成为主节点，继续提供缓存服务，避免了由于缓存实例宕机⽽导致的缓存雪崩问题。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>缓存穿透指的是数据库本就没有这个数据，请求直奔数据库，缓存系统形同虚设。</li><li>缓存击穿（失效）指的是数据库有数据，缓存本应该也有数据，但是缓存过期了，Redis 这层流量防护屏障被 击穿了，请求直奔数据库。</li><li>缓存雪崩指的是⼤量的热点数据⽆法在 Redis 缓存中处理（⼤⾯积热点数据缓存失效、Redis 宕机），流量全部打到数据库，导致数据库极⼤压⼒。</li></ul><h2 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h2>',38),r=[o];function u(d,k){return s(),a("div",null,r)}const b=n(l,[["render",u],["__file","03_redis.html.vue"]]);export{b as default};
