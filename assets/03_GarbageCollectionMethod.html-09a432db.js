import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as i,b as l}from"./app-741d04ae.js";const r={},h=l('<h2 id="标记-清除算法" tabindex="-1"><a class="header-anchor" href="#标记-清除算法" aria-hidden="true">#</a> 标记-清除算法:</h2><p>有两个阶段，标记和清除;</p><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理：</h3><ul><li>标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象；</li><li>最基础的算法,后续的收集算法都是基于这种思路并对其不足进行改进;</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点：</h3><ol><li>效率问题：标记和清除两个过程的效率都不高；</li><li>空间问题：标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li></ol><h2 id="复制算法" tabindex="-1"><a class="header-anchor" href="#复制算法" aria-hidden="true">#</a> 复制算法:</h2><p>为了解决标记清除算法的效率问题;</p><h3 id="工作原理-1" tabindex="-1"><a class="header-anchor" href="#工作原理-1" aria-hidden="true">#</a> 工作原理:</h3><ul><li>将可用内存按容量划分为大小相等的两块，每次只使用其中的一块；当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</li><li>每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。</li></ul><h3 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1" aria-hidden="true">#</a> 缺点:</h3><ul><li>将内存缩小为了原来的一半;</li><li>复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会变低。现在的商业虚拟机都采用这种收集算法来回收新生代。</li></ul><h2 id="标记-整理算法" tabindex="-1"><a class="header-anchor" href="#标记-整理算法" aria-hidden="true">#</a> 标记-整理算法:</h2><ul><li>标记出所有需要回收的对象，让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存；</li><li>年轻代采用这种算法;如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以老年代一般不选用复制算法；</li></ul><h2 id="分代收集算法" tabindex="-1"><a class="header-anchor" href="#分代收集算法" aria-hidden="true">#</a> 分代收集算法</h2><p>当前商业虚拟机的垃圾收集都采用“分代收集”(Generational Collection)算法，根据对象存活周期的不同将内存划分为几块.</p><h3 id="工作原理-2" tabindex="-1"><a class="header-anchor" href="#工作原理-2" aria-hidden="true">#</a> 工作原理:</h3><ul><li>一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法;</li><li>在新生代中,每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集;</li><li>老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记—清理”或者“标记—整理”算法来进行回收。</li></ul>',18),d=[h];function n(t,c){return e(),i("div",null,d)}const u=a(r,[["render",n],["__file","03_GarbageCollectionMethod.html.vue"]]);export{u as default};
