const e=JSON.parse('{"key":"v-4a69c9aa","path":"/moyu/redis/06_redis.html","title":"布隆过滤器","lang":"zh-CN","frontmatter":{"title":"布隆过滤器","subtitle":"布隆过滤器","category":["redis"],"tag":["摸鱼"],"order":6,"description":"使用场景 你遇到数据量⼤，⼜需要去重的时候就可以考虑布隆过滤器 解决 Redis 缓存穿透问题（⾯试重点）； 邮件过滤，使⽤布隆过滤器实现邮件⿊名单过滤； 触发过的事件,不触发； 定义 布隆过滤器 (Bloom Filter)是由 Burton Howard Bloom 于 1970 年提出，它是⼀种 space efficient 的概率型数据结构，⽤于判断⼀个元素是否在集合中。 当布隆过滤器说，某个数据存在时，这个数据可能不存在；当布隆过滤器说，某个数据不存在时，那么这个数据⼀定不存在。 哈希表也能⽤于判断元素是否在集合中，但是布隆过滤器只需要哈希表的 1/8 或 1/4 的空间复杂度就能完成同样的问题。 布隆过滤器可以插⼊元素，但不可以删除已有元素。 其中的元素越多，false positive rate(误报率)越⼤，但是 false negative (漏报)是不可能的。","head":[["meta",{"property":"og:url","content":"https://merryldt.github.io/moyu/redis/06_redis.html"}],["meta",{"property":"og:site_name","content":"魔力社区"}],["meta",{"property":"og:title","content":"布隆过滤器"}],["meta",{"property":"og:description","content":"使用场景 你遇到数据量⼤，⼜需要去重的时候就可以考虑布隆过滤器 解决 Redis 缓存穿透问题（⾯试重点）； 邮件过滤，使⽤布隆过滤器实现邮件⿊名单过滤； 触发过的事件,不触发； 定义 布隆过滤器 (Bloom Filter)是由 Burton Howard Bloom 于 1970 年提出，它是⼀种 space efficient 的概率型数据结构，⽤于判断⼀个元素是否在集合中。 当布隆过滤器说，某个数据存在时，这个数据可能不存在；当布隆过滤器说，某个数据不存在时，那么这个数据⼀定不存在。 哈希表也能⽤于判断元素是否在集合中，但是布隆过滤器只需要哈希表的 1/8 或 1/4 的空间复杂度就能完成同样的问题。 布隆过滤器可以插⼊元素，但不可以删除已有元素。 其中的元素越多，false positive rate(误报率)越⼤，但是 false negative (漏报)是不可能的。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-29T03:10:42.000Z"}],["meta",{"property":"article:author","content":"坎布里奇"}],["meta",{"property":"article:tag","content":"摸鱼"}],["meta",{"property":"article:modified_time","content":"2023-07-29T03:10:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"布隆过滤器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-29T03:10:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"坎布里奇\\",\\"url\\":\\"https://merryldt.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[{"level":3,"title":"误判率是为甚么？","slug":"误判率是为甚么","link":"#误判率是为甚么","children":[]},{"level":3,"title":"为什么不允许删除元素呢？","slug":"为什么不允许删除元素呢","link":"#为什么不允许删除元素呢","children":[]}]}],"git":{"createdTime":1690600242000,"updatedTime":1690600242000,"contributors":[{"name":"kansuper","email":"17835059864@163.com","commits":1}]},"readingTime":{"minutes":2.01,"words":604},"filePathRelative":"moyu/redis/06_redis.md","localizedDate":"2023年7月29日","excerpt":"<h2> 使用场景</h2>\\n<p>你遇到数据量⼤，⼜需要去重的时候就可以考虑布隆过滤器</p>\\n<ul>\\n<li>解决 Redis 缓存穿透问题（⾯试重点）；</li>\\n<li>邮件过滤，使⽤布隆过滤器实现邮件⿊名单过滤；</li>\\n<li>触发过的事件,不触发；</li>\\n</ul>\\n<h2> 定义</h2>\\n<ul>\\n<li>布隆过滤器 (Bloom Filter)是由 Burton Howard Bloom 于 1970 年提出，它是⼀种 space efficient 的概率型数据结构，⽤于判断⼀个元素是否在集合中。</li>\\n<li>当布隆过滤器说，某个数据存在时，这个数据可能不存在；当布隆过滤器说，某个数据不存在时，那么这个数据⼀定不存在。</li>\\n<li>哈希表也能⽤于判断元素是否在集合中，但是布隆过滤器只需要哈希表的 1/8 或 1/4 的空间复杂度就能完成同样的问题。</li>\\n<li>布隆过滤器可以插⼊元素，但不可以删除已有元素。</li>\\n<li>其中的元素越多，false positive rate(误报率)越⼤，但是 false negative (漏报)是不可能的。</li>\\n</ul>","autoDesc":true}');export{e as data};
