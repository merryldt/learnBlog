import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,b as t}from"./app-0030d599.js";const i="/assets/Untitled-2e168625.png",o="/assets/Untitled1-8263a27e.png",l="/assets/Untitled2-5eb5d4b9.png",p="/assets/Untitled3-77d86f86.png",r="/assets/Untitled4-9df660fb.png",s="/assets/Untitled5-f8c34b48.png",c="/assets/Untitled6-c869a601.png",d="/assets/Untitled7-135b3835.png",u="/assets/Untitled8-09b4caec.png",m="/assets/Untitled9-76a49935.png",k="/assets/Untitled10-654116f8.png",_="/assets/Untitled11-b20a3ebc.png",v="/assets/Untitled12-3b54ee9a.png",b={},h=t('<h1 id="mysql-order-by-优化" tabindex="-1"><a class="header-anchor" href="#mysql-order-by-优化" aria-hidden="true">#</a> Mysql order by 优化</h1><h1 id="order-by-语句怎么优化" tabindex="-1"><a class="header-anchor" href="#order-by-语句怎么优化" aria-hidden="true">#</a> <strong><strong>order by 语句怎么优化？</strong></strong></h1><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3><h3 id="表结构" tabindex="-1"><a class="header-anchor" href="#表结构" aria-hidden="true">#</a> 表结构：</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> `sys_user` <span class="token punctuation">(</span>\n  `user_id` bigint <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户ID&#39;</span><span class="token punctuation">,</span>\n  `dept_id` bigint <span class="token constant">DEFAULT</span> <span class="token constant">NULL</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;部门ID&#39;</span><span class="token punctuation">,</span>\n  `user_name` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">COLLATE</span> utf8mb4_general_ci <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户账号&#39;</span><span class="token punctuation">,</span>\n  `nick_name` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">COLLATE</span> utf8mb4_general_ci <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;用户昵称&#39;</span><span class="token punctuation">,</span>\n  `email` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token constant">COLLATE</span> utf8mb4_general_ci <span class="token constant">DEFAULT</span> &#39;&#39; <span class="token constant">COMMENT</span> <span class="token char">&#39;用户邮箱&#39;</span><span class="token punctuation">,</span>\n  `phonenumber` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">COLLATE</span> utf8mb4_general_ci <span class="token constant">DEFAULT</span> &#39;&#39; <span class="token constant">COMMENT</span> <span class="token char">&#39;手机号码&#39;</span><span class="token punctuation">,</span>\n  `create_by` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token constant">COLLATE</span> utf8mb4_general_ci <span class="token constant">DEFAULT</span> &#39;&#39; <span class="token constant">COMMENT</span> <span class="token char">&#39;创建者&#39;</span><span class="token punctuation">,</span>\n  `create_time` datetime <span class="token constant">DEFAULT</span> <span class="token constant">NULL</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;创建时间&#39;</span><span class="token punctuation">,</span>\n  `update_by` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token constant">COLLATE</span> utf8mb4_general_ci <span class="token constant">DEFAULT</span> &#39;&#39; <span class="token constant">COMMENT</span> <span class="token char">&#39;更新者&#39;</span><span class="token punctuation">,</span>\n  `update_time` datetime <span class="token constant">DEFAULT</span> <span class="token constant">NULL</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;更新时间&#39;</span><span class="token punctuation">,</span>\n  `remark` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token constant">COLLATE</span> utf8mb4_general_ci <span class="token constant">DEFAULT</span> <span class="token constant">NULL</span> <span class="token constant">COMMENT</span> <span class="token char">&#39;备注&#39;</span><span class="token punctuation">,</span>\n  <span class="token class-name">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span>`user_id`<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token constant">KEY</span> `idx_emial` <span class="token punctuation">(</span>`email`<span class="token punctuation">)</span> <span class="token class-name">USING</span> <span class="token constant">BTREE</span>\n<span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span><span class="token class-name">InnoDB</span> <span class="token constant">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">101</span> <span class="token class-name">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token constant">COLLATE</span><span class="token operator">=</span>utf8mb4_general_ci <span class="token constant">COMMENT</span><span class="token operator">=</span><span class="token char">&#39;用户信息表&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行sql" tabindex="-1"><a class="header-anchor" href="#执行sql" aria-hidden="true">#</a> 执行sql:</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>explain select email<span class="token punctuation">,</span>user_name<span class="token punctuation">,</span>nick_name from sys_user where email <span class="token operator">=</span> &#39;ry<span class="token annotation punctuation">@qq.com</span>&#39; order by user_name limit <span class="token number">1000</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="explain的结果如下" tabindex="-1"><a class="header-anchor" href="#explain的结果如下" aria-hidden="true">#</a> explain的结果如下:</h3><p><img src="'+i+'" alt="" loading="lazy"> Extra列中有Using filesort说明进行了排序，<strong>排序这个动作有可能在内存中完成，也有可能在磁盘中完成</strong></p><p>那么对记录根据user_name字段排序是如何做到的呢？</p><h2 id="优化1-排序的字段增加索引" tabindex="-1"><a class="header-anchor" href="#优化1-排序的字段增加索引" aria-hidden="true">#</a> 优化1:排序的字段增加索引</h2><h3 id="_1-增加email-user-name-作为一个联合索引。" tabindex="-1"><a class="header-anchor" href="#_1-增加email-user-name-作为一个联合索引。" aria-hidden="true">#</a> 1. 增加email,user_name 作为一个联合索引。</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">KEY</span> `idx_email_user_name` <span class="token punctuation">(</span>`email`<span class="token punctuation">,</span>`user_name`<span class="token punctuation">)</span> <span class="token constant">USING</span> <span class="token constant">BTREE</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>执行过程：</p><ol><li>从 索引(email,user_name) 找到第一个满足email=&#39;ry@qq.com’条件的主键id ;</li><li>根据id 查找到整行数据，取出 email,user_name,nick_name 三个字段的值，作为结果集的一部分直接返回；</li><li>从 索引(email,user_name) 找到下一个记录的主键id;</li><li>重复步骤2，3，找到所有满足条件的记录的前1000行返回客户端</li></ol><h3 id="_2-增加email-user-name-nick-name-索引字段" tabindex="-1"><a class="header-anchor" href="#_2-增加email-user-name-nick-name-索引字段" aria-hidden="true">#</a> 2. 增加email,user_name,nick_name 索引字段：</h3><p>email,user_name,nick_name 作为一个联合索引；</p><p><strong>覆盖索引是指，索引上的信息足够满足查询请求，不需要再回到主键索引上去取数据。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">KEY</span> `idx_email_user_name` <span class="token punctuation">(</span>`email`<span class="token punctuation">,</span>`user_name`<span class="token punctuation">,</span>`nick_name`<span class="token punctuation">)</span> <span class="token constant">USING</span> <span class="token constant">BTREE</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>执行过程：</p><ol><li>从 索引(email,user_name,nick_name) 找到第一个满足email=&#39;ry@qq.com’条件的记录，取出 email,user_name,nick_name 三个字段的值，作为结果集的一部分直接返回；</li><li>从 索引(email,user_name,nick_name) 找到下一个记录，取出 email,user_name,nick_name 三个字段的值，作为结果集的一部分直接返回;</li><li>重复步骤2，3，找到所有满足条件的记录的前1000行返回客户端</li></ol><p>当然，在实际过程中不可能为了每个查询都是用覆盖索引，把语句涉及到的字段都加上索引，因为索引的维护也是需要代价的。这就需要根据实际情况去权衡。</p><h1 id="全字段和rowid-排序" tabindex="-1"><a class="header-anchor" href="#全字段和rowid-排序" aria-hidden="true">#</a> 全字段和rowid 排序：</h1><h3 id="查看mysql版本" tabindex="-1"><a class="header-anchor" href="#查看mysql版本" aria-hidden="true">#</a> 查看mysql版本：</h3><p>select version();</p><h3 id="max-length-for-sort-data" tabindex="-1"><a class="header-anchor" href="#max-length-for-sort-data" aria-hidden="true">#</a> max_length_for_sort_data</h3><ol><li>MySQL中专门控制用于排序的行数据的长度的一个参数。它的意思是，如果单行的长度超过这个值，MySQL就认为单行太大，要换一个算法。</li><li>MySQL 8.0.20 之前有用。从 8.0.20 开始， 由于优化器更改使其过时且无效；所以设置也没有用了。</li></ol><p>show variables like &#39;%max_length_for_sort_data%&#39;;</p><p><img src="'+p+'" alt="" loading="lazy"> 排序模式sort_mode：</p><ul><li>&lt;varlen_sort_key,rowid&gt;：使用了rowid排序模式</li><li>&lt;varlen_sort_key, additional_fields&gt;：使用了全字段排序模式</li><li>&lt;varlen_sort_key, packed_additional_fields&gt;：使用了打包字段排序模式（与全字段排序模式工作原理一致，不同点在于会将字段紧密的排列在一起，而不是固定长度的空间）通俗的讲就是比如：一个字段定义为VARCHAR(32)，不打包占用32字节，打包后可能占用 20字节。</li></ul><h2 id="全字段排序" tabindex="-1"><a class="header-anchor" href="#全字段排序" aria-hidden="true">#</a> 全字段排序</h2><p>把所有需要查询的字段放到内存排完序后直接返回。 <img src="'+r+`" alt="" loading="lazy"></p><p>过程：</p><ol><li>初始化 sort buffer，从 email 索引找满足email=ry@qq.com 条件的主键id</li><li>根据主键id回表找到对应的记录，取出 email,user_name,nick_name 三个字段的值，存入 sort buffer</li><li>从 email 索引找到下一个记录的主键</li><li>重复步骤2，3，找到所有满足条件的记录</li><li>对 sort buffer 中的数据按照字段 user_name 排序，排序结果取前1000行返回客户端</li></ol><p>注意：</p><p>按user_name排序这个动作，可能在内存中完成，也可能需要使用外部排序。这取决于排序需要的内存大小和 sort_buffer_size（mysql为排序开辟的内存大小，即sort buffer）的大小；如果需要的内存大小大于sort_buffer_size， 则需要利用磁盘文件排序。</p><h3 id="_1-执行sql" tabindex="-1"><a class="header-anchor" href="#_1-执行sql" aria-hidden="true">#</a> 1. 执行sql:</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> email<span class="token punctuation">,</span>user_name<span class="token punctuation">,</span>nick_name <span class="token keyword">from</span> sys_user <span class="token keyword">where</span> email <span class="token operator">=</span> <span class="token string">&#39;0.6694216902082988jj.qq.com&#39;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> user_name <span class="token keyword">limit</span> <span class="token number">8000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>确保可以出现Extra中出现Using filesort：此时建议，可以去掉所有的索引，或者创建比较复杂比较多的数据。 <img src="`+s+`" alt="" loading="lazy"></p><h3 id="_2-执行trace-记得执行的sql-不要带explain" tabindex="-1"><a class="header-anchor" href="#_2-执行trace-记得执行的sql-不要带explain" aria-hidden="true">#</a> 2. 执行trace,记得执行的sql 不要带Explain:</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 开启</span>
<span class="token keyword">SET</span> optimizer_trace<span class="token operator">=</span><span class="token string">&#39;enabled=on&#39;</span><span class="token punctuation">;</span> 
<span class="token comment"># 设置的大一点，让它走全字段排序</span>
<span class="token keyword">set</span> max_length_for_sort_data <span class="token operator">=</span> <span class="token number">4000</span><span class="token punctuation">;</span>
<span class="token comment"># 执行sql;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sys_user  <span class="token keyword">where</span> email <span class="token operator">=</span> <span class="token string">&#39;0.6694216902082988jj.qq.com&#39;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> user_name <span class="token keyword">limit</span> <span class="token number">8000</span><span class="token punctuation">;</span>
<span class="token comment"># 执行trace</span>
<span class="token keyword">SELECT</span>  <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>information_schema<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>OPTIMIZER_TRACE<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-结果" tabindex="-1"><a class="header-anchor" href="#_3-结果" aria-hidden="true">#</a> 3. 结果：</h3><p>mysql 8.0.25 的结果：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>{
    <span class="token string">&quot;select#&quot;</span>: <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">&quot;steps&quot;</span>: <span class="token punctuation">[</span>
        {
            <span class="token string">&quot;sorting_table&quot;</span>: <span class="token string">&quot;sys_user&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;filesort_information&quot;</span>: <span class="token punctuation">[</span>
                {
                    <span class="token string">&quot;direction&quot;</span>: <span class="token string">&quot;asc&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;expression&quot;</span>: <span class="token string">&quot;\`sys_user\`.\`email\`&quot;</span>
                }<span class="token punctuation">,</span>
                {
                    <span class="token string">&quot;direction&quot;</span>: <span class="token string">&quot;asc&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;expression&quot;</span>: <span class="token string">&quot;\`sys_user\`.\`user_name\`&quot;</span>
                }
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">&quot;filesort_priority_queue_optimization&quot;</span>: {
                <span class="token string">&quot;limit&quot;</span>: <span class="token number">8000</span>
            }<span class="token punctuation">,</span>
            <span class="token string">&quot;filesort_execution&quot;</span>: <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">&quot;filesort_summary&quot;</span>: {
                <span class="token string">&quot;memory_available&quot;</span>: <span class="token number">32768</span><span class="token punctuation">,</span>
                <span class="token string">&quot;key_size&quot;</span>: <span class="token number">161</span><span class="token punctuation">,</span>
                <span class="token string">&quot;row_size&quot;</span>: <span class="token number">4546</span><span class="token punctuation">,</span>
                <span class="token string">&quot;max_rows_per_buffer&quot;</span>: <span class="token number">7</span><span class="token punctuation">,</span>
                <span class="token string">&quot;num_rows_estimate&quot;</span>: <span class="token number">95943</span><span class="token punctuation">,</span>
                <span class="token string">&quot;num_rows_found&quot;</span>: <span class="token number">97629</span><span class="token punctuation">,</span>
                <span class="token string">&quot;num_initial_chunks_spilled_to_disk&quot;</span>: <span class="token number">1266</span><span class="token punctuation">,</span>
                <span class="token string">&quot;peak_memory_used&quot;</span>: <span class="token number">33736</span><span class="token punctuation">,</span>
                <span class="token string">&quot;sort_algorithm&quot;</span>: <span class="token string">&quot;std::sort&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;sort_mode&quot;</span>: <span class="token string">&quot;&lt;fixed_sort_key, packed_additional_fields&gt;&quot;</span>
            }
        }
    <span class="token punctuation">]</span>
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>这里主要看filesort_summary即可。</li><li>sort_mode ： &lt;fixed_sort_key, packed_additional_fields&gt; 使用的打包全字段排序模式。也就是全字段排序模式；</li><li>num_rows_found 97629，有这么多行数据参与了排序。</li><li>row_size: 4546 每一行数据的大小</li></ol><p>mysql 5.6的结果：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token string">&quot;filesort_summary&quot;</span>: {
    <span class="token string">&quot;rows&quot;</span>: <span class="token number">4546</span><span class="token punctuation">,</span> 
    <span class="token string">&quot;examined_rows&quot;</span>: <span class="token number">97629</span><span class="token punctuation">,</span>
    <span class="token string">&quot;number_of_tmp_files&quot;</span>: <span class="token number">1266</span><span class="token punctuation">,</span>
    <span class="token string">&quot;sort_buffer_size&quot;</span>: <span class="token number">1000</span><span class="token punctuation">,</span><span class="token comment">-- 排序缓存的大小，单位Byte</span>
    <span class="token string">&quot;sort_mode&quot;</span>: <span class="token string">&quot;&lt;sort_key, additional_fields&gt;&quot;</span> 
  } <span class="token comment">/* filesort_summary */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>examined_rows: 97629, -- 参与排序的行</li><li>sort_mode : &quot;&lt;sort_key, additional_fields&gt;&quot; 全字段排序</li><li>number_of_tmp_files -- 使用临时文件的个数，这个值如果为0代表全部使用的sort_buffer内存排序，否则使用的磁盘文件排序</li><li>sort_buffer_size 缓存大小</li></ol><h2 id="rowid字段排序" tabindex="-1"><a class="header-anchor" href="#rowid字段排序" aria-hidden="true">#</a> rowid字段排序</h2><p>把需要排序的字段和每一行数据对应的唯一标识[rowid]放到内存排序，然后通过rowid找到对应的数据返回。 <img src="`+c+`" alt="" loading="lazy"></p><p>过程：</p><ol><li>初始化 sort buffer，从 email 索引找满足email=ry@qq.com 条件的主键id</li><li>根据主键id回表找到对应的记录，取出 email,user_name 两个字段的值，存入 sort buffer</li><li>从 email 索引找到下一个记录的主键</li><li>重复步骤2，3，找到所有满足条件的记录</li><li>对 sort buffer 中的数据按照字段 user_name 排序，排序结果取前1000行</li><li>按照id的值回到原表中取出email,user_name和nick_name三个字段返回给客户端。</li></ol><h3 id="_1-执行sql-1" tabindex="-1"><a class="header-anchor" href="#_1-执行sql-1" aria-hidden="true">#</a> 1. 执行sql:</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> email<span class="token punctuation">,</span>user_name<span class="token punctuation">,</span>nick_name <span class="token keyword">from</span> sys_user <span class="token keyword">where</span> email <span class="token operator">=</span> <span class="token string">&#39;0.6694216902082988jj.qq.com&#39;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> user_name <span class="token keyword">limit</span> <span class="token number">8000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>确保可以出现Extra中出现Using filesort：此时建议，可以去掉所有的索引，或者创建比较复杂比较多的数据。</p><figure><img src="`+s+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-执行trace-记得执行的sql-不要带explain-1" tabindex="-1"><a class="header-anchor" href="#_2-执行trace-记得执行的sql-不要带explain-1" aria-hidden="true">#</a> 2. 执行trace,记得执行的sql 不要带Explain:</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 开启</span>
<span class="token keyword">SET</span> optimizer_trace<span class="token operator">=</span><span class="token string">&#39;enabled=on&#39;</span><span class="token punctuation">;</span> 
<span class="token comment"># 设置的小一点，让它走全字段排序； 这个值小于 email,user_name,nick_name 这三个值的和</span>
<span class="token keyword">set</span> max_length_for_sort_data <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token comment"># 执行sql;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sys_user  <span class="token keyword">where</span> email <span class="token operator">=</span> <span class="token string">&#39;0.6694216902082988jj.qq.com&#39;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> user_name <span class="token keyword">limit</span> <span class="token number">8000</span><span class="token punctuation">;</span>
<span class="token comment"># 执行trace</span>
<span class="token keyword">SELECT</span>  <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>information_schema<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>OPTIMIZER_TRACE<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-结果-1" tabindex="-1"><a class="header-anchor" href="#_3-结果-1" aria-hidden="true">#</a> 3. 结果：</h3><p>mysql 8.0.25 的结果,因为新版本max_length_for_sort_data不生效了，修改也无法展示rowi的排序。。：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>{
    <span class="token string">&quot;select#&quot;</span>: <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">&quot;steps&quot;</span>: <span class="token punctuation">[</span>
        {
            <span class="token string">&quot;sorting_table&quot;</span>: <span class="token string">&quot;sys_user&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;filesort_information&quot;</span>: <span class="token punctuation">[</span>
                {
                    <span class="token string">&quot;direction&quot;</span>: <span class="token string">&quot;asc&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;expression&quot;</span>: <span class="token string">&quot;\`sys_user\`.\`email\`&quot;</span>
                }<span class="token punctuation">,</span>
                {
                    <span class="token string">&quot;direction&quot;</span>: <span class="token string">&quot;asc&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;expression&quot;</span>: <span class="token string">&quot;\`sys_user\`.\`user_name\`&quot;</span>
                }
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">&quot;filesort_priority_queue_optimization&quot;</span>: {
                <span class="token string">&quot;limit&quot;</span>: <span class="token number">8000</span>
            }<span class="token punctuation">,</span>
            <span class="token string">&quot;filesort_execution&quot;</span>: <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">&quot;filesort_summary&quot;</span>: {
                <span class="token string">&quot;memory_available&quot;</span>: <span class="token number">32768</span><span class="token punctuation">,</span>
                <span class="token string">&quot;key_size&quot;</span>: <span class="token number">161</span><span class="token punctuation">,</span>
                <span class="token string">&quot;row_size&quot;</span>: <span class="token number">4546</span><span class="token punctuation">,</span>
                <span class="token string">&quot;max_rows_per_buffer&quot;</span>: <span class="token number">7</span><span class="token punctuation">,</span>
                <span class="token string">&quot;num_rows_estimate&quot;</span>: <span class="token number">95943</span><span class="token punctuation">,</span>
                <span class="token string">&quot;num_rows_found&quot;</span>: <span class="token number">97629</span><span class="token punctuation">,</span>
                <span class="token string">&quot;num_initial_chunks_spilled_to_disk&quot;</span>: <span class="token number">1266</span><span class="token punctuation">,</span>
                <span class="token string">&quot;peak_memory_used&quot;</span>: <span class="token number">33736</span><span class="token punctuation">,</span>
                <span class="token string">&quot;sort_algorithm&quot;</span>: <span class="token string">&quot;std::sort&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;sort_mode&quot;</span>: <span class="token string">&quot;&lt;fixed_sort_key, packed_additional_fields&gt;&quot;</span>
            }
        }
    <span class="token punctuation">]</span>
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>这里主要看filesort_summary即可。</li><li>sort_mode ： &lt;fixed_sort_key, packed_additional_fields&gt; 使用的打包全字段排序模式。也就是全字段排序模式；</li><li>num_rows_found 97629，有这么多行数据参与了排序。</li><li>row_size: 4546 每一行数据的大小</li></ol><p>mysql 5.6的结果：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token string">&quot;filesort_summary&quot;</span>: {
    <span class="token string">&quot;rows&quot;</span>: <span class="token number">4546</span><span class="token punctuation">,</span> 
    <span class="token string">&quot;examined_rows&quot;</span>: <span class="token number">97629</span><span class="token punctuation">,</span>
    <span class="token string">&quot;number_of_tmp_files&quot;</span>: <span class="token number">1266</span><span class="token punctuation">,</span>
    <span class="token string">&quot;sort_buffer_size&quot;</span>: <span class="token number">1000</span><span class="token punctuation">,</span>
    <span class="token string">&quot;sort_mode&quot;</span>: <span class="token string">&quot;&lt;sort_key, rowid&gt;&quot;</span> 
  } <span class="token comment">/* filesort_summary */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>examined_rows: 97629, -- 参与排序的行</li><li>sort_mode : &quot;&lt;sort_key, rowid&gt;&quot; rowid 字段排序</li><li>number_of_tmp_files -- 使用临时文件的个数，这个值如果为0代表全部使用的sort_buffer内存排序，否则使用的磁盘文件排序</li><li>sort_buffer_size 缓存大小</li></ol><h2 id="系统属性" tabindex="-1"><a class="header-anchor" href="#系统属性" aria-hidden="true">#</a> 系统属性：</h2><p>系统属性，一定要注意mysql 的版本，这些信息，在不同的版本中，有不同的问题。</p><h3 id="sort-buffer-size" tabindex="-1"><a class="header-anchor" href="#sort-buffer-size" aria-hidden="true">#</a> sort_buffer_size</h3><p>sort_buffer_size，就是MySQL为排序开辟的内存（sort_buffer）的大小。如果要排序的数据量小于sort_buffer_size，排序就在内存中完成。但如果排序数据量太大，内存放不下，则不得不利用磁盘临时文件辅助排序。</p><h3 id="max-length-for-sort-data-1" tabindex="-1"><a class="header-anchor" href="#max-length-for-sort-data-1" aria-hidden="true">#</a> max_length_for_sort_data</h3><p>MySQL中专门控制用于排序的行数据的长度的一个参数。它的意思是，如果单行的长度超过这个值，MySQL就认为单行太大，要换一个算法。</p><h3 id="tmp-table-size" tabindex="-1"><a class="header-anchor" href="#tmp-table-size" aria-hidden="true">#</a> tmp_table_size</h3><p>tmp_table_size这个配置限制了内存临时表的大小，默认值是16M。如果临时表大小超过了tmp_table_size，那么内存临时表就会转成磁盘临时表。</p><h2 id="全字段排序-vs-rowid排序" tabindex="-1"><a class="header-anchor" href="#全字段排序-vs-rowid排序" aria-hidden="true">#</a> <strong><strong>全字段排序 VS rowid排序：</strong></strong></h2><ol><li>如果MySQL实在是担心排序内存太小，会影响排序效率，才会采用rowid排序算法，这样排序过程中一次可以排序更多行，但是需要再回到原表去取数据。</li><li>如果MySQL认为内存足够大，会优先选择全字段排序，把需要的字段都放到sort_buffer中，这样排序后就会直接从内存里面返回查询结果了，不用再回到原表去取数据。</li><li>MySQL的一个设计思想：<strong>如果内存够，就要多利用内存，尽量减少磁盘访问。</strong></li></ol><h1 id="临时表排序" tabindex="-1"><a class="header-anchor" href="#临时表排序" aria-hidden="true">#</a> 临时表排序：</h1><h3 id="排序算法" tabindex="-1"><a class="header-anchor" href="#排序算法" aria-hidden="true">#</a> 排序算法：</h3><ol><li>优先队列排序算法；（MySQL 5.6版本引入的一个新的排序算法）</li><li>归并排序算法；</li></ol><p>当explain 执行后，Extra 中出现 Using temporary 和 Using filesort；</p><p>Extra字段显示Using temporary，表示的是需要使用临时表；Using filesort，表示的是需要执行排序操作。</p><p><strong>对于InnoDB表来说</strong>，执行全字段排序会减少磁盘访问，因此会被优先选择。</p><h3 id="内存临时表" tabindex="-1"><a class="header-anchor" href="#内存临时表" aria-hidden="true">#</a> 内存临时表：</h3><p><strong>对于内存表，回表过程只是简单地根据数据行的位置，直接访问内存得到数据，根本不会导致多访问磁盘</strong>。优化器没有了这一层顾虑，那么它会优先考虑的，就是用于排序的行越少越好了，所以，MySQL这时就会选择rowid排序。</p><h3 id="磁盘临时表" tabindex="-1"><a class="header-anchor" href="#磁盘临时表" aria-hidden="true">#</a> 磁盘临时表：</h3><p>磁盘临时表使用的引擎默认是InnoDB，是由参数internal_tmp_disk_storage_engine控制的。</p><p>当使用磁盘临时表的时候，对应的就是一个没有显式索引的InnoDB表的排序过程。</p><h2 id="控制参数-查看日志" tabindex="-1"><a class="header-anchor" href="#控制参数-查看日志" aria-hidden="true">#</a> 控制参数，查看日志：</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>set tmp_table_size<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">;</span>
set sort_buffer_size<span class="token operator">=</span><span class="token number">32768</span><span class="token punctuation">;</span>
set max_length_for_sort_data<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>
<span class="token comment">/* 打开 optimizer_trace，只对本线程有效 */</span>
<span class="token class-name">SET</span> optimizer_trace<span class="token operator">=</span>&#39;enabled<span class="token operator">=</span>on&#39;<span class="token punctuation">;</span> 

<span class="token comment">/* 执行语句 */</span>
select word from words order by <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> limit <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">/* 查看 OPTIMIZER_TRACE 输出 */</span>
<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> \`information_schema\`<span class="token punctuation">.</span>\`<span class="token constant">OPTIMIZER_TRACE</span>\`\\<span class="token class-name">G</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="计算扫描行数" tabindex="-1"><a class="header-anchor" href="#计算扫描行数" aria-hidden="true">#</a> 计算扫描行数：</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/* @a保存Innodb_rows_read的初始值 */</span>
select <span class="token constant">VARIABLE_VALUE</span> into <span class="token annotation punctuation">@a</span> from  performance_schema<span class="token punctuation">.</span>session_status where variable_name <span class="token operator">=</span> &#39;<span class="token class-name">Innodb_rows_read</span>&#39;<span class="token punctuation">;</span>

<span class="token comment">/* @b保存Innodb_rows_read的当前值 */</span>
select <span class="token constant">VARIABLE_VALUE</span> into <span class="token annotation punctuation">@b</span> from performance_schema<span class="token punctuation">.</span>session_status where variable_name <span class="token operator">=</span> &#39;<span class="token class-name">Innodb_rows_read</span>&#39;<span class="token punctuation">;</span>

<span class="token comment">/* 计算Innodb_rows_read差值，即执行sql 扫描的行数 */</span>
select <span class="token annotation punctuation">@b</span><span class="token operator">-</span><span class="token annotation punctuation">@a</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sort_buffer_size超过了需要排序的数据量的大小，number_of_tmp_files就是0，表示排序可以直接在内存中完成。</p><p>否则就需要放在临时文件中排序。sort_buffer_size越小，需要分成的份数越多，number_of_tmp_files的值就越大。</p><h1 id="分析执行的神器-optimizer-trace" tabindex="-1"><a class="header-anchor" href="#分析执行的神器-optimizer-trace" aria-hidden="true">#</a> 分析<strong><strong>执行的神器-Optimizer Trace</strong></strong>：</h1><h2 id="版本-mysql-8-0-25" tabindex="-1"><a class="header-anchor" href="#版本-mysql-8-0-25" aria-hidden="true">#</a> 版本：mysql 8.0.25</h2><h2 id="介绍optimizer-trace" tabindex="-1"><a class="header-anchor" href="#介绍optimizer-trace" aria-hidden="true">#</a> 介绍OPTIMIZER_TRACE</h2><ol><li>explain 可以把帮助我们看到执行计划，optimizer_trace 可以帮助我们更细致的了解</li><li>一个跟踪功能，跟踪执行的语句的解析优化执行的过程，并将跟踪到的信息记录到INFORMATION_SCHEMA.OPTIMIZER_TRACE表中。</li><li>MySQL从5.6开始提供了相关的功能，但是MySQL默认关闭它；</li></ol><h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令：</h2><h3 id="查看-optimizer-trace" tabindex="-1"><a class="header-anchor" href="#查看-optimizer-trace" aria-hidden="true">#</a> 查看 optimizer_trace</h3><p>show variables like &#39;%optimizer_trace%&#39; ; <img src="`+d+'" alt="" loading="lazy"></p><ol><li><p>optimizer_trace</p><p>enabled=on, 启用/禁用optimizer_trace功能。</p><p>one_line=off 决定了跟踪信息的存储方式，为on表示使用单行存储; 单行存储结果中没有空格，不能以json形式打开。不建议使用。</p></li><li><p>optimizer_trace_features</p><ol><li>greedy_search=on, range_optimizer=on, dynamic_range=on, repeated_subselect=on</li><li>表示打印的信息，默认打开所有。</li></ol></li><li><p>optimizer_trace_limit</p><ol><li>1</li><li>存储信息的条数</li></ol></li><li><p>optimizer_trace_max_mem_size</p><ol><li>16384 optimizer_trace内存的大小，如果跟踪信息超过这个大小，信息将会被截断。</li></ol></li><li><p>optimizer_trace_offset</p><ol><li>-1</li><li>指的是查询最近的一条查询。结合3 的意思就是，optimizer_trace 中只存储最后执行的一行的结果集。</li></ol></li></ol><h3 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用" aria-hidden="true">#</a> 如何使用？</h3><ol><li><p>开启</p><ol><li>会话或者是全局开启；</li><li>会话开启： set session optimizer_trace=&#39;enabled=on&#39;;</li><li>全局开启： SET optimizer_trace=&#39;enabled=on&#39;;</li></ol></li><li><p>执行;一定要同时执行。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 执行查询语句</span>\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sys_user  <span class="token keyword">order</span> <span class="token keyword">by</span> email<span class="token punctuation">,</span>user_name <span class="token keyword">limit</span> <span class="token number">1000</span><span class="token punctuation">;</span>\n<span class="token comment"># 执行trace</span>\n<span class="token keyword">SELECT</span>  <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>information_schema<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>OPTIMIZER_TRACE<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>结果展示,整个分为3个阶段：</p><ol><li>join_preparation(准备阶段)</li><li>join_optimization(优化阶段)</li><li>join_execution(执行阶段)</li></ol></li></ol><figure><img src="'+u+`" alt="optimizer_trace 执行 大纲图" tabindex="0" loading="lazy"><figcaption>optimizer_trace 执行 大纲图</figcaption></figure><pre><code>      optimizer_trace 执行 大纲图
</code></pre><h2 id="join-optimization-优化阶段" tabindex="-1"><a class="header-anchor" href="#join-optimization-优化阶段" aria-hidden="true">#</a> join_optimization(优化阶段)</h2><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>主要介绍4个</p><ol><li>ref_optimizer_key_uses ：如果优化器认为查询可以使用ref的话，在这里列出可以使用的索引。</li><li>rows_estimation ：估算表行数和扫描的代价。如果查询中存在range扫描的话，对range扫描进行计划分析及代价估算。</li><li>considered_execution_plans ：对比各可行计划的代价，选择相对最优的执行计划。</li><li>attaching_conditions_to_tables ：添加附加条件，使得条件尽可能筛选单表数据。</li></ol><h3 id="ref-optimizer-key-uses" tabindex="-1"><a class="header-anchor" href="#ref-optimizer-key-uses" aria-hidden="true">#</a> ref_optimizer_key_uses</h3><p>列出了所有可用的ref类型的索引。如果是使用了组合索引的多个部分，在ref_optimizer_key_uses下会列出多个结构体。</p><h3 id="rows-estimation" tabindex="-1"><a class="header-anchor" href="#rows-estimation" aria-hidden="true">#</a> rows_estimation</h3><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>table_scan： 全表扫描的行数(rows)以及所需要的代价(cost)。</li><li>potential_range_indexes： 该阶段会列出表中所有的索引并分析其是否可用，并且还会列出索引中可用的列字段。</li><li>group_index_range： 评估在使用了GROUP BY或者是DISTINCT的时候是否有适合的索引可用。</li></ol><h3 id="considered-execution-plans" tabindex="-1"><a class="header-anchor" href="#considered-execution-plans" aria-hidden="true">#</a> considered_execution_plans</h3><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>table：分析的表对象名称及其别名。</li><li>plan_prefix：前置的执行计划（格式：顺序ID：表名）。 如果 test t1 left join test2 t2 , 这里会显示 0:”t1”</li><li>best_access_path：当前最优的执行顺序信息结果集 <ol><li>considered_access_paths 数组 <ol><li>rows_to_scan: 95943 扫描行数</li><li>access_type: scan 表示使用索引的方式。可参照为explain中的type字段</li><li>cost 成本</li><li>chosen ： true 表示最终使用了该方案，如果是false，不使用；</li></ol></li><li>condition_filtering_pct：类似于explain中的filtered列，这是一个估算值。</li><li>rows_for_plan：该执行计划最终的扫描行数，这里的行数其实也是估算值。</li><li>cost_for_plan：该执行计划的执行代价，由considered_access_paths的cost相加而得。</li><li>chosen：是否选择了该执行计划。</li></ol></li></ol><h2 id="这里只重点分析-join-execution-执行阶段" tabindex="-1"><a class="header-anchor" href="#这里只重点分析-join-execution-执行阶段" aria-hidden="true">#</a> 这里只重点分析：join_execution(执行阶段)</h2><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><p>sorting_table: 排序表</p></li><li><p>filesort_information 排序的字段</p></li><li><p>filesort_priority_queue_optimization 优先队列优化排序，一般在使用limit 子句的时候会使用优先队列</p></li><li><p>filesort_execution：执行文件排序。</p></li><li><p>filesort_summary：文件排序汇总信息。</p><ol><li>memory_available. 可用内存，可以理解为是sort_buffer_size设置的值</li><li>num_rows_found 有多少条数据参与排序，越小越好</li><li>num_initial_chunks_spilled_to_disk 产生了几个临时文件，0表示完全基于内存排序</li><li>sort_mode： <ul><li>&lt;varlen_sort_key,rowid&gt;：使用了rowid排序模式</li><li>&lt;varlen_sort_key, additional_fields&gt;：使用了全字段排序模式</li><li>&lt;varlen_sort_key, packed_additional_fields&gt;：使用了打包字段排序模式</li></ul></li></ol><p>e: peak_memory_used <strong>表示排序过程中任意时刻使用的最大内存。</strong></p></li></ol><h1 id="当-order-by-语句执行的比较慢时-我们可以通过如下方法来进行优化" tabindex="-1"><a class="header-anchor" href="#当-order-by-语句执行的比较慢时-我们可以通过如下方法来进行优化" aria-hidden="true">#</a> 当 order by 语句执行的比较慢时，我们可以通过如下方法来进行优化</h1><h2 id="_1-不要用-作为查询列表-只返回需要的列" tabindex="-1"><a class="header-anchor" href="#_1-不要用-作为查询列表-只返回需要的列" aria-hidden="true">#</a> 1. 不要用 * 作为查询列表，只返回需要的列</h2><h2 id="_2-尽量让排序的字段可以使用索引-避免filesort发生" tabindex="-1"><a class="header-anchor" href="#_2-尽量让排序的字段可以使用索引-避免filesort发生" aria-hidden="true">#</a> 2. 尽量让排序的字段可以使用索引，避免filesort发生；</h2><h2 id="_3-如果出现filesort-对其优化" tabindex="-1"><a class="header-anchor" href="#_3-如果出现filesort-对其优化" aria-hidden="true">#</a> 3. 如果出现filesort，对其优化</h2><ol><li>首先查看自己的mysql 版本；</li><li>其实不赞成这里的优化，因为修改的是全局变量，可能这里好了，其他的sql 受影响了。</li><li>可以调整参数： <ol><li>max_length_for_sort_data ； 修改其大小，可以让mysql 排序选择 全局排序还是rowid 字段排序。(从 8.0.20 开始废弃了)</li><li>sort_buffer_size 增加 <code>[sort_buffer_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_sort_buffer_size)</code> 变量值。理想情况下，该值应该足够大，以便整个结果集适合排序缓冲区（以避免写入磁盘和合并过程）。</li><li>增加 <code>[read_rnd_buffer_size](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_read_rnd_buffer_size)</code> 变量值以便一次读取更多行。</li></ol></li></ol><h2 id="_4-从业务角度考虑-拆解sql" tabindex="-1"><a class="header-anchor" href="#_4-从业务角度考虑-拆解sql" aria-hidden="true">#</a> 4. 从业务角度考虑，拆解sql</h2>',127),g=[h];function f(q,y){return a(),e("div",null,g)}const E=n(b,[["render",f],["__file","01_order_by.html.vue"]]);export{E as default};
